<Window x:Class="Notification.Wpf.Sample.Views.SampleWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Notification.Wpf.Sample.Views"
        xmlns:wpf="clr-namespace:Notification.Wpf;assembly=Notification.Wpf"
        xmlns:controls="clr-namespace:Notification.Wpf.Controls;assembly=Notification.Wpf"
        xmlns:viewModels="clr-namespace:Notification.Wpf.Sample.ViewModels"
        xmlns:elements="clr-namespace:Notification.Wpf.Sample.Elements"
        xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
        xmlns:helpers="clr-namespace:Notification.Wpf.Sample.Helpers"
        xmlns:fa5="http://schemas.fontawesome.com/icons/"
        mc:Ignorable="d"
        WindowState="Maximized"
        ResizeMode="CanMinimize"
        Title="SampleWindow" Height="1200" Width="1920"
        d:DataContext="{d:DesignInstance viewModels:SampleWindowViewModel, IsDesignTimeCreatable=True }">
    <Window.Resources>
        <Style TargetType="{x:Type CheckBox}" >
            <Setter Property="Foreground" Value="Black"/>
            <Setter Property="Visibility" Value="Visible"/>
            <Style.Triggers>
                <Trigger Property="IsChecked" Value="True">
                    <Setter Property="Background" Value="{StaticResource LimeGreenBrush}"/>
                </Trigger>
            </Style.Triggers>
        </Style>
    </Window.Resources>
    <DockPanel>
        <controls:NotificationArea x:Name="WindowArea" DockPanel.Dock="Bottom"
                                   Position="{Binding MessagePosition}"
                                   MaxItems="{Binding MaxItems}"
                                   CollapseProgressAuto="{Binding CollapseProgressIfMoreRows}"
                                   Panel.ZIndex="999" />

        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition/>
                <ColumnDefinition/>
                <ColumnDefinition/>
                <ColumnDefinition/>
            </Grid.ColumnDefinitions>

            <GroupBox Header="Title">
                <local:TextSettingView DataContext="{Binding TitleSettingModel}"/>
            </GroupBox>

            <GroupBox Header="Message" Grid.Row="0" Grid.Column="1">
                <local:TextSettingView DataContext="{Binding MessageSettingModel}"/>
            </GroupBox>

            <StackPanel Grid.Row="0" Grid.Column="2" Orientation="Horizontal" >
                <GroupBox Header="Notification area settings">
                    <GroupBox.Resources>
                        <Style TargetType="{x:Type GroupBox}">
                            <Setter Property="MinWidth" Value="120"></Setter>
                        </Style>
                    </GroupBox.Resources>
                    <StackPanel>
                        <CheckBox Content="Show X btn"
                                  IsChecked="{Binding ShowXBtn, UpdateSourceTrigger= PropertyChanged}"
                                  Margin="5,0" />

                        <StackPanel Orientation="Horizontal">
                            <GroupBox VerticalAlignment="Top" Width="120" HorizontalAlignment="Left">
                                <GroupBox.HeaderTemplate>
                                    <DataTemplate>
                                        <StackPanel Orientation="Horizontal">
                                            <TextBlock Text="Expiration time" />
                                            <CheckBox
                                        IsChecked="{Binding UseExpirationTime, UpdateSourceTrigger= PropertyChanged}"
                                        Margin="5,0" />
                                        </StackPanel>
                                    </DataTemplate>
                                </GroupBox.HeaderTemplate>
                                <xctk:TimeSpanUpDown  Value="{Binding ExpirationTime,
                                ValidatesOnDataErrors=False,
                                NotifyOnValidationError=True,
                                ValidatesOnNotifyDataErrors=False,
                                UpdateSourceTrigger=PropertyChanged}" 
                                                VerticalAlignment="Center"
                                                UpdateValueOnEnterKey="True"  
                                                Minimum="1"
                                                Step="1"
                                                ShowSeconds="True"
                                                ClipValueToMinMax="True"/>
                            </GroupBox>
                        </StackPanel>
                        <StackPanel Orientation="Horizontal">
                            <GroupBox VerticalAlignment="Top" Header="MinWidth">
                                <xctk:DoubleUpDown  Value="{Binding DataContext.AreaMinWidth, RelativeSource={RelativeSource AncestorType={x:Type local:SampleWindow}},
                                ValidatesOnDataErrors=False,
                                NotifyOnValidationError=True,
                                ValidatesOnNotifyDataErrors=False,
                                UpdateSourceTrigger=PropertyChanged}"
                                                UpdateValueOnEnterKey="True"  
                                                Minimum="50"
                                                Maximum="3000"
                                                Increment="50"
                                                ClipValueToMinMax="True"/>
                            </GroupBox>
                            <GroupBox VerticalAlignment="Top" Header="MaxWidth">
                                <xctk:DoubleUpDown  Value="{Binding DataContext.AreaMaxWidth, RelativeSource={RelativeSource AncestorType={x:Type local:SampleWindow}},
                                ValidatesOnDataErrors=False,
                                NotifyOnValidationError=True,
                                ValidatesOnNotifyDataErrors=False,
                                UpdateSourceTrigger=PropertyChanged}"
                                                UpdateValueOnEnterKey="True"  
                                                Minimum="50"
                                                Maximum="3000"
                                                Increment="50"
                                                ClipValueToMinMax="True"/>
                            </GroupBox>

                        </StackPanel>
                    </StackPanel>
                </GroupBox>

                <GroupBox  Header="Window settings">
                    <GroupBox.Resources>
                        <Style TargetType="{x:Type GroupBox}">
                            <Setter Property="MinWidth" Value="120"></Setter>
                        </Style>
                    </GroupBox.Resources>

                    <StackPanel HorizontalAlignment="Left">
                        <CheckBox Content="Collapse progress automatically" ToolTip="progress bar automatically collapsing , if messages count more than maximum"
                                                      IsChecked="{Binding CollapseProgressIfMoreRows, UpdateSourceTrigger=PropertyChanged}"/>
                        <GroupBox>
                            <GroupBox.HeaderTemplate>
                                <DataTemplate>
                                    <StackPanel Orientation="Horizontal">
                                        <TextBlock>
                                        <Run Text="Notification max count " />
                                        <Run
                                            Text="{Binding MaxItems,Mode=TwoWay ,UpdateSourceTrigger=PropertyChanged}" />
                                        </TextBlock>
                                    </StackPanel>
                                </DataTemplate>
                            </GroupBox.HeaderTemplate>
                            <xctk:UIntegerUpDown  Value="{Binding DataContext.MaxItems, RelativeSource={RelativeSource AncestorType={x:Type local:SampleWindow}},
                                ValidatesOnDataErrors=False,
                                NotifyOnValidationError=True,
                                ValidatesOnNotifyDataErrors=False,
                                UpdateSourceTrigger=PropertyChanged}"
                                            UpdateValueOnEnterKey="True"  
                                            Minimum="1"
                                            Maximum="3000"
                                            Increment="1"
                                            ClipValueToMinMax="True"/>

                        </GroupBox>
                        <GroupBox Header="Message position, when new stack" >
                            <ComboBox ItemsSource="{helpers:EnumValues {x:Type controls:NotificationPosition}}"
                                              SelectedItem="{Binding MessagePosition, UpdateSourceTrigger= PropertyChanged}"
                                              VerticalAlignment="Center"/>
                        </GroupBox>
                        <CheckBox Content="In window"
                                  IsChecked="{Binding ShowInParentWindow, UpdateSourceTrigger= PropertyChanged}"
                                  Margin="5,0" />

                    </StackPanel>
                </GroupBox>

            </StackPanel>
            <GroupBox Header="Icon section" Grid.Row="0" Grid.Column="3">
                <GroupBox.Resources>
                    <Style TargetType="Button">
                        <Setter Property="Width" Value="100"/>
                        <Setter Property="Margin" Value="5"/>
                        <Setter Property="VerticalAlignment" Value="Center"/>
                    </Style>
                </GroupBox.Resources>

                <StackPanel>
                    <StackPanel Orientation="Horizontal">
                        <CheckBox
                                IsChecked="{Binding ImageAsIcon}"
                                Content="Use image as icon" 
                                VerticalAlignment="Center"/>
                        <fa5:SvgAwesome
                                    Icon="{Binding SelectedIcon,
                                Converter={helpers:IconConverter}}"
                                    Height="20" Width="20"
                                    Foreground="{Binding IconForeground}" />

                    </StackPanel>
                    <ListView x:Name="ListIcons" Height="220"
                                      ItemsSource="{Binding Icons}"
                                      SelectedItem="{Binding SelectedIcon}"
                                      ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                                      ScrollViewer.PanningMode="VerticalOnly">
                        <ListView.ItemsPanel>
                            <ItemsPanelTemplate>
                                <WrapPanel />
                            </ItemsPanelTemplate>
                        </ListView.ItemsPanel>
                    </ListView>
                </StackPanel>

            </GroupBox>

            <GroupBox Header="Notification" Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="3" VerticalAlignment="Top">
                <DockPanel>
                    <StackPanel Orientation="Horizontal" VerticalAlignment="Top">

                        <GroupBox Header="Notification type">
                            <ComboBox ItemsSource="{helpers:EnumValues {x:Type wpf:NotificationType}}"
                                  SelectedItem="{Binding SelectedNotificationType, UpdateSourceTrigger= PropertyChanged}"
                                  Width="100" VerticalAlignment="Center" />
                        </GroupBox>
                        <GroupBox Header="Trim type">
                            <ComboBox ItemsSource="{helpers:EnumValues {x:Type wpf:NotificationTextTrimType}}"
                                      SelectedItem="{Binding SelectedTrimType, UpdateSourceTrigger= PropertyChanged}"
                                      VerticalAlignment="Top" Width="100"
                                      Height="25" />
                        </GroupBox>
                        <GroupBox>
                            <GroupBox.HeaderTemplate>
                                <DataTemplate>
                                    <StackPanel Orientation="Horizontal">
                                        <TextBlock>
                                            <Run Text="Rows count " />
                                            <Run
                                                Text="{Binding RowCount,UpdateSourceTrigger=PropertyChanged}" />
                                        </TextBlock>
                                    </StackPanel>
                                </DataTemplate>
                            </GroupBox.HeaderTemplate>
                            <xctk:IntegerUpDown  Value="{Binding DataContext.RowCount, RelativeSource={RelativeSource AncestorType={x:Type local:SampleWindow}},
                                ValidatesOnDataErrors=False,
                                NotifyOnValidationError=True,
                                ValidatesOnNotifyDataErrors=False,
                                UpdateSourceTrigger=PropertyChanged}"
                                             UpdateValueOnEnterKey="True"  
                                             Minimum="1"
                                             Increment="1"
                                             ClipValueToMinMax="True"/>
                        </GroupBox>
                        <GroupBox>
                            <GroupBox.HeaderTemplate>
                                <DataTemplate>
                                    <StackPanel Orientation="Horizontal">
                                        <TextBlock Text="Left button" />
                                        <CheckBox
                                            IsChecked="{Binding ShowLeftButton,
                                UpdateSourceTrigger= PropertyChanged}"
                                            Margin="5,0" />
                                    </StackPanel>
                                </DataTemplate>
                            </GroupBox.HeaderTemplate>
                            <TextBox
                                Text="{Binding LeftButtonText,
                        UpdateSourceTrigger= PropertyChanged}"
                                Width="100" />
                        </GroupBox>
                        <GroupBox>
                            <GroupBox.HeaderTemplate>
                                <DataTemplate>
                                    <StackPanel Orientation="Horizontal">
                                        <TextBlock Text="Right button" />
                                        <CheckBox
                                            IsChecked="{Binding ShowRightButton,
                                UpdateSourceTrigger= PropertyChanged}"
                                            Margin="5,0" />
                                    </StackPanel>
                                </DataTemplate>
                            </GroupBox.HeaderTemplate>
                            <TextBox
                                Text="{Binding RightButtonText,
                        UpdateSourceTrigger= PropertyChanged}"
                                Width="100" />
                        </GroupBox>
                        <CheckBox Content="Close on click"
                              IsChecked="{Binding CloseOnClick,
                                UpdateSourceTrigger= PropertyChanged}"
                              Margin="5,0" />

                    </StackPanel>


                </DockPanel>
            </GroupBox>
            <GroupBox Header="Test" DockPanel.Dock="Right" HorizontalAlignment="Stretch" Grid.Row="1" Grid.Column="3" >
                <WrapPanel Grid.Row="2">
                    <WrapPanel.Resources>
                        <Style TargetType="Button">
                            <Setter Property="Width" Value="100"/>
                            <Setter Property="Margin" Value="5"/>
                            <Setter Property="VerticalAlignment" Value="Center"/>
                        </Style>
                    </WrapPanel.Resources>
                    <Button Content="Test message" Command="{Binding ShowTestMessageCommand}" VerticalAlignment="Center" Height="20" Width="100" Margin="5,0"/>
                    <Button Content="Timer message" Command="{Binding ShowTimerMessageCommand}"/>
                    <Button Content="Show content" Command="{Binding ShowContentCommand}"/>
                    <Button Content="Show Progress" Command="{Binding ShowProgressMessageCommand}"/>
                </WrapPanel>

            </GroupBox>
            <DockPanel Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="3">
                <GroupBox Header="Color section" DockPanel.Dock="Left">
                    <StackPanel Orientation="Horizontal">
                        <!--<xctk:ColorPicker />-->
                        <!--<xctk:ColorSpectrumSlider/>-->

                        <GroupBox Header="Background">
                            <xctk:ColorCanvas SelectedColor="{Binding ContentBackground}"/>
                        </GroupBox>
                        <GroupBox Header="Foreground">
                            <xctk:ColorCanvas SelectedColor="{Binding ContentForeground}"/>
                        </GroupBox>
                        <GroupBox Header="Progress line color">
                            <xctk:ColorCanvas SelectedColor="{Binding ProgressColor}"/>
                        </GroupBox>
                        <GroupBox Header="Icon foreground">
                            <xctk:ColorCanvas SelectedColor="{Binding IconForeground}"/>
                        </GroupBox>
                    </StackPanel>
                </GroupBox>
                <GroupBox Header="Image settings" HorizontalAlignment="Stretch" HorizontalContentAlignment="Stretch">
                    <DockPanel>
                    <StackPanel Orientation="Horizontal" DockPanel.Dock="Top">
                        <Button Content="Select image" Command="{Binding OpenImageCommand}" Height="20" Width="100" Margin="5,0" />
                        <GroupBox Header="Image position" >
                            <ComboBox ItemsSource="{helpers:EnumValues {x:Type wpf:ImagePosition}}"
                                      SelectedItem="{Binding ImagePosition, UpdateSourceTrigger= PropertyChanged}"
                                      Width="100" VerticalAlignment="Center"/>
                        </GroupBox>
                    </StackPanel>
                        <Image Margin="5,0"
                               Source="{Binding Image,UpdateSourceTrigger=PropertyChanged}" />

                    </DockPanel>
                </GroupBox>

            </DockPanel>

            <GroupBox Header="Preview" Grid.Row="3" Grid.Column="0" Grid.ColumnSpan="4">
                <TabControl>
                    <TabItem Header="Message">
                        <controls:Notification 
                            MinWidth="{Binding AreaMinWidth}"
                            MaxWidth="{Binding AreaMaxWidth}">
                            <wpf:NotificationContent 

                                Title="{Binding TitleSettingModel.Text}"
                                Message="{Binding MessageSettingModel.Text}"


                                Type ="{Binding SelectedNotificationType}"
                                Image ="{Binding Image}"
                                CloseOnClick="{Binding CloseOnClick}"


                                LeftButtonAction ="{Binding LeftAction}"
                                LeftButtonContent ="{Binding LeftButtonText}"
                                RightButtonAction ="{Binding RightAction}"
                                RightButtonContent="{Binding RightButtonText}"


                                Background ="{Binding }"
                                Foreground ="{Binding }"
                                Icon ="{Binding }"
                                MessageTextSettings ="{Binding MessageSettingModel.TextSetting}"
                                TitleTextSettings ="{Binding TitleSettingModel.TextSetting}"
                                RowsCount ="{Binding RowCount}"
                                TrimType="{Binding SelectedTrimType}"

                            />
                        </controls:Notification>
                    </TabItem>
                    <TabItem Header="Progress">
                        <!--<ProgressBar Width="200" Height="20" IsIndeterminate="False" Value="{Binding RowCount,
                RelativeSource={RelativeSource AncestorType={x:Type Window}},Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}">
            <b:Interaction.Behaviors>
                <controls:ProgresBarAnimateBehavior />
            </b:Interaction.Behaviors>
                </ProgressBar>-->

                        <DockPanel>
                            <StackPanel Orientation="Horizontal" DockPanel.Dock="Top" VerticalAlignment="Top" Margin="0,2">
                                <StackPanel>
                                    <CheckBox Content="Collapsed progress bar" IsChecked="{Binding ProgressCollapsed, UpdateSourceTrigger= PropertyChanged}" Margin="5,0"/>
                                    <CheckBox Content="Title or Message when collapse" IsChecked="{Binding ProgressTitleOrMessage, UpdateSourceTrigger= PropertyChanged}" Margin="5,0" />
                                </StackPanel>
                            </StackPanel>

                        </DockPanel>
                    </TabItem>
                    <TabItem Header="Image">

                    </TabItem>
                    <TabItem Header="String">

                    </TabItem>
                </TabControl>
            </GroupBox>
        </Grid>
    </DockPanel>
</Window>
