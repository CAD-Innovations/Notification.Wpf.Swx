name: .NET Core Desktop

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:

  build:

    strategy:
      matrix:
        configuration: [Debug, Release]

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: Notification.Wpf.sln                         # Replace with your solution name, i.e. MyWpfApp.sln.
      
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@2008f912f56e61277eefaac6d1888b750582aa16
      
    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}
        
    # собрать проект      
    - name: Build               
      run: dotnet build --no-restore
      
    - name: Download Artifact
      uses: actions/download-artifact@v2
      with:
          name: ${{steps.createReleaseTag.outputs.string}}
          path: ${{steps.createReleaseTag.outputs.string}}

    - name: action-zip
      # You may pin to the exact commit or the version.
      # uses: montudor/action-zip@0852c26906e00f8a315c704958823928d8018b28
      uses: montudor/action-zip@v1.0.0
       # Since we have a directory, create a zip
    - run: zip -r "${{steps.createReleaseTag.outputs.string}}.zip" "${{steps.createReleaseTag.outputs.string}}"
    - name: Create Release
      id: create_release
      uses: actions/create-release@latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          Automated Release by GitHub Action CI
        draft: false
        prerelease: true
      continue-on-error: true
      
    - name: Upload Release Asset (x64)
      id: upload-release-asset-x64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${{steps.createReleaseTag.outputs.string}}.zip
        asset_name: ${{steps.createReleaseTag.outputs.string}}.zip
        asset_content_type: application/zip      

                                # собрать проект релиза и упаковать в пакет      
    - name: Packing
      run: |                    
          dotnet build Notification.Wpf/Notification.Wpf.csproj -c Release
          dotnet pack Notification.Wpf/Notification.Wpf.csproj -c Release
      
                                # опубликовать пакет в личном репозитории GitHub     
    - name: Push package
      run: dotnet nuget push Notification.Wpf/bin/Release/*.nupkg --skip-duplicate --source https://nuget.pkg.github.com/Platonenkov/index.json -k ${{secrets.GITHUB_TOKEN}}       
                                # опубликовать пакет в личном репозитории NuGet   
    - name: Publishing
      run: dotnet nuget push Notification.Wpf/bin/Release/*.nupkg -k ${{ secrets.NuGetApiKey }} --skip-duplicate -s https://api.nuget.org/v3/index.json
